This example stores filesystem information in accumulo.  The example stores the information in the following three tables.  More information about the table structures can be found at the end of README.dirlist.

 * directory table : This table stores information about the filesystem directory structure.
 * index table     : This table stores a file name index.  It can be used to quickly find files with given name, suffix, or prefix.
 * data table      : This table stores the file data.  File with duplicate data are only stored once.  

This example shows how to use Accumulo to store a file system history.  It has the following classes:

 * Ingest.java - Recursively lists the files and directories under a given path, ingests their names and file info (not the file data!) into a Accumulo table, and indexes the file names in a separate table.
 * QueryUtil.java - Provides utility methods for getting the info for a file, listing the contents of a directory, and performing single wild card searches on file or directory names.
 * Viewer.java - Provides a GUI for browsing the file system information stored in Accumulo.
 * FileCountMR.java - Runs MR over the file system information and writes out recursive counts to a Accumulo table.
 * FileCount.java - Accomplishes the same thing as FileCountMR, but in a different way.  Computes recursive counts and stores them back into table.
 * StringArraySummation.java - Aggregates counts for the FileCountMR reducer.
 
To begin, ingest some data with Ingest.java.

  bin/accumulo org.apache.accumulo.examples.dirlist.Ingest test-instance localhost root password dirTable indexTable dataTable visibility 100000 /local/user1/workspace

This may take some time if there are large files in the /local/user1/workspace directory.  If you use 0 instead of 100000 on the command line, the ingest will run much faster, but it will not put any file data into Accumulo (the dataTable will be empty).
Note that running this example will create tables dirTable, indexTable, and dataTable in Accumulo that you should delete when you have completed the example.
If you modify a file or add new files in the directory ingested (e.g. /local/user1/workspace), you can run Ingest again to add new information into the Accumulo tables.

To browse the data ingested, use Viewer.java.  Be sure to give the root user the authorizations to see the data.

  bin/accumulo org.apache.accumulo.examples.dirlist.Viewer test-instance localhost root password dirTable dataTable auths /local/user1/workspace

To list the contents of specific directories, use QueryUtil.java.

  bin/accumulo org.apache.accumulo.examples.dirlist.QueryUtil test-instance localhost root password dirTable auths /local/user1
  bin/accumulo org.apache.accumulo.examples.dirlist.QueryUtil test-instance localhost root password dirTable auths /local/user1/workspace

To perform searches on file or directory names, also use QueryUtil.java.  Search terms must contain no more than one wild card and cannot contain "/".
Note these queries run on the indexTable table instead of the dirTable table.

  bin/accumulo org.apache.accumulo.examples.dirlist.QueryUtil test-instance localhost root password indexTable auths filename -search
  bin/accumulo org.apache.accumulo.examples.dirlist.QueryUtil test-instance localhost root password indexTable auths filename* -search
  bin/accumulo org.apache.accumulo.examples.dirlist.QueryUtil test-instance localhost root password indexTable auths *jar -search
  bin/accumulo org.apache.accumulo.examples.dirlist.QueryUtil test-instance localhost root password indexTable auths filename*jar -search

To count the number of direct children (directories and files) and descendants (children and children's descendents, directories and files), run the FileCountMR over the dirTable table.
The results can be written back to the same table.

  bin/tool.sh lib/accumulo-examples-*.jar org.apache.accumulo.examples.dirlist.FileCountMR test-instance localhost root password dirTable dirTable visibility visibility

Alternatively, you can run FileCount.java which performs the same counts but is not a MapReduce.  FileCount will be faster for small data sets.

Directory Table

Here is a illustration of what data looks like in the directory table:
row colf:colq [vis]	value
000 dir:exec [visibility]    true
000 dir:hidden [visibility]    false
000 dir:lastmod [visibility]    1291996886000
000 dir:length [visibility]    1666
001/local dir:exec [visibility]    true
001/local dir:hidden [visibility]    false
001/local dir:lastmod [visibility]    1304945270000
001/local dir:length [visibility]    272
002/local/Accumulo.README \x7F\xFF\xFE\xCFH\xA1\x82\x97:exec [mygroup]    false
002/local/Accumulo.README \x7F\xFF\xFE\xCFH\xA1\x82\x97:hidden [mygroup]    false
002/local/Accumulo.README \x7F\xFF\xFE\xCFH\xA1\x82\x97:lastmod [mygroup]    1308746481000
002/local/Accumulo.README \x7F\xFF\xFE\xCFH\xA1\x82\x97:length [mygroup]    9192
002/local/Accumulo.README \x7F\xFF\xFE\xCFH\xA1\x82\x97:md5 [mygroup]    274af6419a3c4c4a259260ac7017cbf1

The rows are of the form depth + path, where depth is the number of slashes ("/") in the path padded to 3 digits.  This is so that all the children of a directory appear as consecutive keys in Accumulo; without the depth, you would for example see all the subdirectories of /local before you saw /usr.
For directories the column family is "dir".  For files the column family is Long.MAX_VALUE - lastModified in bytes rather than string format so that newer versions sort earlier.

Index Table

Here is an illustration of what data looks like in the index table:
row colf:colq [vis]
fAccumulo.README i:002/local/Accumulo.README [visibility]
flocal i:001/local [visibility]
rEMDAER.olumuccA i:002/local/Accumulo.README [visibility]
rlacol i:001/local [visibility]

The values of the index table are null.  The rows are of the form "f" + filename or "r" + reverse file name.  This is to enable searches with wildcards at the beginning, middle, or end.

Data Table

Here is an illustration of what data looks like in the data table:
row colf:colq [vis]	value
274af6419a3c4c4a259260ac7017cbf1 refs:e77276a2b56e5c15b540eaae32b12c69\x00filext [mygroup]    README
274af6419a3c4c4a259260ac7017cbf1 refs:e77276a2b56e5c15b540eaae32b12c69\x00name [mygroup]    /local/Accumulo.README
274af6419a3c4c4a259260ac7017cbf1 ~chunk:\x00\x0FB@\x00\x00\x00\x00 [mygroup]    *******************************************************************************\x0A1. Building\x0A\x0AIn the normal tarball or RPM release of accumulo, [truncated]
274af6419a3c4c4a259260ac7017cbf1 ~chunk:\x00\x0FB@\x00\x00\x00\x01 [mygroup]

The rows are the md5 hash of the file.  Some column family : column qualifier pairs are "refs" : hash of file name + null byte + property name, in which case the value is property value.  There can be multiple references to the same file which are distinguished by the hash of the file name.
Other column family : column qualifier pairs are "~chunk" : chunk size in bytes + chunk number in bytes, in which case the value is the bytes for that chunk of the file.  There is an end of file data marker whose chunk number is the number of chunks for the file and whose value is empty.

There may exist multiple copies of the same file (with the same md5 hash) with different chunk sizes or different visibilities.  There is an iterator that can be set on the data table that combines these copies into a single copy with a visibility taken from the visibilities of the file references, e.g. (vis from ref1)|(vis from ref2). 
